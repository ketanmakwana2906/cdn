def validate_payu_vpa(vpa):
    url = "https://uatoneapi.payu.in/payout/merchant/validateVpa"
    access_token = get_pay_u_access_token()
    if not access_token:
        raise ValidationError("Access token not generated")

    params = {"vpa": vpa}
    headers = {
        "accept": "application/json",
        "payoutMerchantId": settings.PAYU_URL_PAYMENT_MERCHANT_ID,
        "Content-Type": "application/json",
        "authorization": f"Bearer {access_token}",
    }

    try:
        response = requests.post(url, headers=headers, params=params)
        if response.status_code == 200:
            result = response.json().get("status")
            if result == 1:  # Assuming 1 indicates an invalid UPI ID
                raise ValidationError(f"The UPI ID '{vpa}' is invalid")
            return True  # UPI ID is valid
        else:
            raise ValidationError("API not reachable or returned a non-200 status")
    except requests.exceptions.RequestException as e:
        raise ValidationError(f"Error validating UPI ID: {e}")


def clean(self):
    if self.refund_mode == "UPI" and self.upi_id:
        validate_payu_vpa(self.upi_id)
    elif self.refund_mode == "UPI" and not self.upi_id:
        raise ValidationError("UPI ID is required for UPI refund mode")
        
