from collections import defaultdict

# Sample API response with multiple routes
irctc_responses = {
    "NDLS-SBIB": {
        "trainBtwnStnsList": [
            {"fromStnCode": "DLI", "toStnCode": "SBIB"},
            {"fromStnCode": "NDLS", "toStnCode": "SBIB"},
            {"fromStnCode": "DSA", "toStnCode": "SBIB"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"},
            {"fromStnCode": "DEE", "toStnCode": "ADI"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"}
        ]
    },
    "NDLS-ADI": {
        "trainBtwnStnsList": [
            {"fromStnCode": "DLI", "toStnCode": "SBIB"},
            {"fromStnCode": "NDLS", "toStnCode": "SBIB"},
            {"fromStnCode": "DSA", "toStnCode": "SBIB"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"},
            {"fromStnCode": "DEE", "toStnCode": "ADI"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"}
        ]
    }
}

# Step 1: Create initial clusters
cluster = defaultdict(set)

for route, data in irctc_responses.items():
    for i in data["trainBtwnStnsList"]:
        from_st = i["fromStnCode"]
        to_st = i["toStnCode"]
        cluster[from_st].add(from_st)
        cluster[from_st].add(to_st)
        cluster[to_st].add(from_st)
        cluster[to_st].add(to_st)

# Step 2: Merge related stations **within respective city clusters**
merged_clusters = []
visited = set()

for station, related_stations in cluster.items():
    if station in visited:
        continue

    new_cluster = set(related_stations)
    for existing_cluster in merged_clusters:
        if any(s in existing_cluster for s in related_stations):
            existing_cluster.update(new_cluster)
            break
    else:
        merged_clusters.append(new_cluster)

    visited.update(new_cluster)

# Convert sets to lists for final output
final_clusters = [sorted(list(cluster)) for cluster in merged_clusters]

print("Final Merged Clusters:", final_clusters)
