from collections import defaultdict

# Sample API response with multiple routes
irctc_responses = {
    "NDLS-SBIB": {
        "trainBtwnStnsList": [
            {"fromStnCode": "DLI", "toStnCode": "SBIB"},
            {"fromStnCode": "NDLS", "toStnCode": "SBIB"},
            {"fromStnCode": "DLI", "toStnCode": "SBIB"},
            {"fromStnCode": "DSA", "toStnCode": "SBIB"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"},
            {"fromStnCode": "DEE", "toStnCode": "ADI"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"}
        ]
    },
    # Add more responses here...
}

# Dictionary to store station clusters
station_groups = []

# Dictionary to map stations to their group
station_to_group = {}

# Process each route's train data
for route, data in irctc_responses.items():
    if "trainBtwnStnsList" in data:
        # Extract all stations appearing in this route's response
        related_stations = set()
        for train in data["trainBtwnStnsList"]:
            related_stations.add(train["fromStnCode"])
            related_stations.add(train["toStnCode"])

        # Check if any station in this response is already in a cluster
        merged_group = None
        for station in related_stations:
            if station in station_to_group:
                merged_group = station_to_group[station]
                break  # Found an existing group, merge into it

        # If no existing group, create a new one
        if merged_group is None:
            merged_group = len(station_groups)
            station_groups.append(set())

        # Add all stations to the identified/created group
        for station in related_stations:
            station_groups[merged_group].add(station)
            station_to_group[station] = merged_group  # Map station to its group

# Convert to list format
final_clusters = [list(group) for group in station_groups]

# Print the final cluster output
print(final_clusters)
