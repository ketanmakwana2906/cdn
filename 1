from oauth2_provider.oauth2_validators import OAuth2Validator

class CustomOAuth2Validator(OAuth2Validator):
    def validate_user(self, username, password, client, request, *args, **kwargs):
        errors = []  # Store authentication errors

        user = custom_authenticate(username=username, password=password, errors=errors)

        if user:
            request.user = user
            return True

        # Store errors in request to be used later
        request.oauth2_errors = errors  
        return False


from rest_framework.response import Response
from rest_framework_social_oauth2.views import ConvertTokenView

class CustomConvertTokenView(ConvertTokenView):
    validator_class = CustomOAuth2Validator  # Use custom validator

    def post(self, request, *args, **kwargs):
        response = super().post(request, *args, **kwargs)

        # Retrieve stored errors from request
        errors = getattr(request, 'oauth2_errors', None)  

        if response.status_code == 401 and errors:
            return Response({'errors': errors}, status=401)

        return response
        
