from collections import defaultdict

# Sample API response with multiple routes
irctc_responses = {
    "NDLS-SBIB": {
        "trainBtwnStnsList": [
            {"fromStnCode": "DLI", "toStnCode": "SBIB"},
            {"fromStnCode": "NDLS", "toStnCode": "SBIB"},
            {"fromStnCode": "DSA", "toStnCode": "SBIB"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"},
            {"fromStnCode": "DEE", "toStnCode": "ADI"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"}
        ]
    },
    "NDLS-ADI": {
        "trainBtwnStnsList": [
            {"fromStnCode": "DLI", "toStnCode": "SBIB"},
            {"fromStnCode": "NDLS", "toStnCode": "SBIB"},
            {"fromStnCode": "DSA", "toStnCode": "SBIB"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"},
            {"fromStnCode": "DEE", "toStnCode": "ADI"},
            {"fromStnCode": "DLI", "toStnCode": "CLDY"}
        ]
    }
}

# Define station categories (Delhi-related & Ahmedabad-related)
delhi_related = {"DLI", "NDLS", "DSA", "DEE"}
ahmedabad_related = {"SBIB", "ADI", "CLDY"}

delhi_cluster = set()
ahmedabad_cluster = set()

# Step 1: Create initial clusters
for route, data in irctc_responses.items():
    for i in data["trainBtwnStnsList"]:
        from_st = i["fromStnCode"]
        to_st = i["toStnCode"]

        if from_st in delhi_related or to_st in delhi_related:
            delhi_cluster.update([from_st, to_st])

        if from_st in ahmedabad_related or to_st in ahmedabad_related:
            ahmedabad_cluster.update([from_st, to_st])

# Step 2: Convert sets to sorted lists for final output
final_clusters = [sorted(list(delhi_cluster)), sorted(list(ahmedabad_cluster))]

print("Final Merged Clusters:", final_clusters)
