class TripAssuranceStatusView(APIView):
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request):
        tm_booking_id = request.data.get('tm_booking_id', None)
        pnr = request.data.get('pnr', None)
        status = request.data.get('status', None)
        chart_prepared = request.data.get('chart_prepared', False)

        if not (tm_booking_id or pnr):
            return JsonResponse({'success': False, "error": "TM Booking ID or PNR is Required.", "data":{}}, status=400)

        filter_mapping = {
            "tm_booking_id": Q(tm_booking_id=tm_booking_id),
            "pnr": Q(pnr_number=pnr)
        }

        key = 'tm_booking_id' if tm_booking_id else 'pnr'
        ta_obj = TripAssurance.objects.filter(Q(user_id=request.user.id) & filter_mapping.get(key))
        if not ta_obj.exists():
            return JsonResponse({'success': False, "error": "Trip Assurance not opted for this booking.", "data":{}}, status=400)

        ta_obj = ta_obj.last()
        data, error = TripAssuranceStatusHelper.generate_data(request, ta_obj, status, chart_prepared)

        if error:
            status = 400
            error = error
            success = False
        else:
            status = 200
            data = data
            success = True

        return JsonResponse({'success': success, "error": error, "data": data}, status=status)

models used in code :

TripAssurance:

class TripAssurance(models.Model):
    # This is the main table for Trip Assurance calculations and all
    prediction_choices = [
        ("FAILED","FAILED"),
        ("WRONG", "WRONG"),
        ("PENDING","PENDING"),
        ("SUCCESS","SUCCESS"),
        ("CANCELLED", "CANCELLED")
    ]
    user = models.ForeignKey(User, on_delete=models.deletion.CASCADE, blank=True, null=True)
    tm_booking_id = models.CharField(max_length=16, null=True, blank=True)
    pnr_number = models.CharField(max_length=16, null=True, blank=True)
    charge_per_person = models.FloatField(validators=[MinValueValidator(0.0)])
    number_of_passengers = models.IntegerField(default=1, validators=[MinValueValidator(1)])
    max_charge_per_person = models.FloatField(default=0.0, validators=[MinValueValidator(0.0)])
    is_chart_prepared = models.BooleanField(default=False)
    trip_cancelled = models.BooleanField(default=False)
    prediction_perc = models.FloatField(null=True, blank=True)
    prediction_result = models.CharField(choices=prediction_choices, default="PENDING", max_length=50)
    final_status = models.CharField(max_length=50, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def clean(self):
        if not self.user:
            raise ValidationError("user_id is missing")

    class Meta:
        verbose_name = 'Trip Assurance'
        db_table = 'trip_assurance'

    @property
    def ta_charge(self):
        return round(float(self.charge_per_person*self.number_of_passengers), 2)

    def __unicode__(self):
        return str(self.tm_booking_id)
    
    def __str__(self):
        return self.tm_booking_id

analyze above api code and models and give proper swagger json including proper requestbody and response as per analze above code and models
