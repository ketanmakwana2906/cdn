class CustomOAuth2Validator(OAuth2Validator):
    def validate_user(self, username, password, client, request, *args, **kwargs):
        kwargs['custom_validator_used'] = True
        try:
            u = authenticate(username=username, password=password, errors=[], **kwargs)
            if u is not None and u.is_active:
                request.user = u
                return True
        except AuthenticationFailed as e:
            CustomOAuth2Validator.error_message = e.detail[0]
            return False
    
class CustomTokenView(TokenView):
    validator_class = CustomOAuth2Validator
    def post(self, request, *args, **kwargs):
        response = super().post(request, *args, **kwargs)
        message = CustomOAuth2Validator.error_message
        if response.status_code == 401:
            return Response({"success":False, "message": message}, status=status.HTTP_200_OK)
        return response
